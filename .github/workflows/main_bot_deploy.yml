name: Deploy to Google Compute Engine

on:
  push:
    branches:
      - master

jobs:
  check-version:
    runs-on: ubuntu-latest

    outputs:
      should_deploy: ${{ steps.compare-versions.outputs.should_deploy }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get previous app version
        id: get-previous-version
        run: |
          echo "prev_version=$(git show HEAD~1:Discord\ Bot/package.json | awk -F '"' '/"version":/{print $4}')" >> $GITHUB_ENV

      - name: Set new app version
        id: set-version
        run: |
          echo "version=$(node -p "require('./Discord Bot/package.json').version")" >> $GITHUB_ENV

      - name: Compare app versions
        id: compare-versions
        run: |
          current_version="${{ env.prev_version }}"
          new_version="${{ env.version }}"
          if [ "$current_version" != "$new_version" ]; then
            echo "App version has increased. Proceeding with deployment..."
            echo "should_deploy=true" >> $GITHUB_ENV
          else
            echo "App version has not changed. Skipping deployment..."
            echo "should_deploy=false" >> $GITHUB_ENV
          fi

  deploy:
    needs: check-version
    if: ${{ needs.check-version.outputs.should_deploy == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Google Cloud SDK
        run: |
          echo "${{ secrets.GCP_SA_KEY }}" > credentials.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud config set compute/zone ${{ secrets.GCP_COMPUTE_ZONE }}

      - name: SSH to Compute Engine instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.GCP_INSTANCE_IP }}
          username: ${{ secrets.GCP_INSTANCE_USERNAME }}
          key: ${{ secrets.GCP_SSH_KEY }}

          # Commands to execute on the instance
          script: |
            cd Movie-Night-Discord-Bot/Discord\ Bot/
            git pull origin master --rebase --autostash
            npm install --production
            pm2 restart index.js
